apiVersion: apps/v1
kind: Deployment # this ressource is for deploying, updating, managing other pods in the cluster, to ensure high availability of them
metadata: # name and namespace to identify the correct application
  name: jenkins
  namespace: tooling
spec:
  replicas: 1 # 1 pod running, in this case no multiple ports simultaneously
  selector: # the selector to map the pod to the correct service, described in jenkinsService.yaml
    matchLabels:
      app: jenkins-server # defining which pod is running in this deployment
  template: # this is the template, how the pod(s) and their container(s) - in our case just one - will be created
    metadata:
      labels:
        app: jenkins-server # label of the application for the template
    spec:
      securityContext: # groups and users, also permissions could be declared here
            fsGroup: 1000 # group id
            runAsUser: 1000 # user id
      serviceAccountName: jenkins-admin # name for the service account, a service identity which can be mapped with certain permissions and/or roles -> jenkinsServiceAccount.yaml
      containers:
        - name: jenkins # name of the container, to identify the correct container
          image: jenkins/jenkins:lts # docker container, from the official docker hub
          resources: # resources for this container, meaning: at least 500m ram, up to 2gb
            limits: #max
              memory: "2Gi"
              cpu: "1000m" # 1 core
            requests: #min
              memory: "500Mi"
              cpu: "500m" # half a core (500 milli cores)
          ports: # open ports for this container
            - name: httpport
              containerPort: 8080 # http port
            - name: jnlpport
              containerPort: 50000 # JNLP port for java network launch protocol
          livenessProbe: # certain specificiations, how to check if the jenkins server is available
            httpGet:
              path: "/login" # check if a GET of the /login at port 8080 is available within 90 seconds after launch, and within 10 seconds after the first check
              port: 8080
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5 # if after 5 attempts the pod isn't responsing within 10 seconds, the pod will restart
          readinessProbe:
            httpGet:
              path: "/login" # similar as above, initial check to see if a pod is running, if negative after 3 attempts, it will be set to "not ready"
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3 # after 3 fails, the pod won't accept incoming traffic but will handle active traffic (as good as possible)
          volumeMounts: # mapping to the volume inside a pod
            - name: jenkins-data
              mountPath: /var/jenkins_home # the directory, where jenkins is deployed inside this pod
      volumes: # the definition of the above mentioned volume
        - name: jenkins-data # mapping name from line
          persistentVolumeClaim:
              claimName: jenkins-pv-claim # see file jenkinsVolume.yaml
